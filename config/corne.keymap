/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// LAYERS

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3

// MACROS

#define SUPER LC(LSHIFT)
#define SUPER2 LA(LC(LSHIFT))

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-unless-interrupted";
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <2 3>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <15 14>;
        };

        combo_bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <10 9>;
        };

        combo_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <25 26>;
        };

        combo_renter {
            bindings = <&kp ENTER>;
            key-positions = <22 21>;
        };

        comb_exclm {
            bindings = <&kp EXCL>;
            key-positions = <1 13>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <14 2>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <15 3>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <16 4>;
        };

        combo_pct {
            bindings = <&kp PERCENT>;
            key-positions = <17 5>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <18 6>;
        };

        combo_amp {
            bindings = <&kp AMPERSAND>;
            key-positions = <19 7>;
        };

        combo_ast {
            bindings = <&kp ASTERISK>;
            key-positions = <20 8>;
        };

        combo_lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <21 9>;
        };

        combo_rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <22 10>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &mt ESCAPE Q      &kp W  &kp E     &kp R         &kp T             &kp Y                  &kp U              &kp I           &kp O    &kp P                  &none
&none  &kp A             &kp S  &kp D     &kp F         &kp G             &kp H                  &kp J              &kp K           &kp L    &kp SQT                &none
&none  &mt LEFT_SHIFT Z  &kp X  &kp C     &kp V         &kp B             &kp N                  &kp M              &kp COMMA       &kp DOT  &mt RIGHT_SHIFT SLASH  &none
                                &kp LCMD  &lt NUM BSPC  &mt LGUI SPACE    &mt RIGHT_SHIFT SPACE  &lt SYM BACKSPACE  &mt RALT ENTER
            >;
        };

        num_layer {
            bindings = <
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6   &kp N7            &kp N8             &kp N9     &kp N0          &none
&none  &kp TILDE     &kp MINUS     &none         &none         &none     &none          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SEMI   &kp SQT         &none
&none  &none         &none         &none         &none         &none     &kp BACKSLASH  &kp COMMA         &kp PERIOD         &kp SLASH  &kp LEFT_SHIFT  &none
                                   &trans        &trans        &trans    &trans         &mo FUNC          &trans
            >;
        };

        sym_layer {
            bindings = <
&none  &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &none
&none  &kp GRAVE  &kp TILDE  &none     &none     &none        &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &none
&none  &kp TILDE  &none      &none     &none     &none        &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &none
                             &trans    &mo FUNC  &trans       &trans     &trans     &trans
            >;
        };

        func_layer {
            bindings = <
&none  &kp F1        &kp F2        &kp F3        &kp F4      &kp F5              &kp F6       &kp F7        &kp F8        &kp F9  &kp F10  &none
&none  &none         &none         &kp C_PREV    &kp C_NEXT  &kp C_PLAY_PAUSE    &kp C_MUTE   &kp C_VOL_DN  &kp C_VOL_UP  &none   &kp F11  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_NXT  &bt BT_CLR          &none        &none         &none         &none   &kp F12  &none
                                   &sys_reset    &trans      &bootloader         &bootloader  &trans        &sys_reset
            >;
        };
    };
};
